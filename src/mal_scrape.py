# -*- coding: utf-8 -*-
"""MAL_scrape.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ryu2DWGfYeHFJbqTOCNXBkxNhn_YNLWf
"""

import os
import json
import time
import random
from zipfile import ZipFile
import pandas as pd
import zipfile
import shutil
from bs4 import BeautifulSoup

# ------------------------------------------------------------------------------
# Helper function to extract the contents of a ZIP file.
# Returns a dictionary mapping file names to their contents.
# ------------------------------------------------------------------------------
def extract_zip(input_zip):
    # Open the ZIP file.
    zip_file = ZipFile(input_zip)
    # Read and return the contents for each file inside the ZIP.
    return {name: zip_file.read(name) for name in zip_file.namelist()}

# ------------------------------------------------------------------------------
# Define the keys (headers) that we want to extract for each anime.
# ------------------------------------------------------------------------------
KEYS = [
    'MAL_ID', 'Name', 'Score', 'Genders', 'English name', 'Japanese name', 'Type', 'Episodes',
    'Aired', 'Premiered', 'Producers', 'Licensors', 'Studios', 'Source', 'Duration', 'Rating',
    'Ranked', 'Popularity', 'Members', 'Favorites', 'Watching', 'Completed', 'On-Hold', 'Dropped',
    'Plan to Watch', 'Score-10', 'Score-9', 'Score-8', 'Score-7', 'Score-6', 'Score-5', 'Score-4',
    'Score-3', 'Score-2', 'Score-1'
]

# ------------------------------------------------------------------------------
# Extract the anime's main title from the HTML.
# ------------------------------------------------------------------------------
def get_name(soup):
    # Find the <h1> tag with the specified class and return its text.
    return soup.find("h1", {"class": "title-name h1_bold_none"}).text.strip()

# ------------------------------------------------------------------------------
# Extract the anime's English name.
# Note: This function finds all spans with class "dark_text" and then returns the text
# of the parent element. Adjust if needed.
# ------------------------------------------------------------------------------
def get_english_name(soup):
    span = soup.findAll("span", {"class": "dark_text"})
    return span[0].parent.text.strip() if span else "Unknown"

# ------------------------------------------------------------------------------
# Extract the container that holds the anime's score and other statistics.
# ------------------------------------------------------------------------------
def get_table(soup):
    return soup.find("div", {"class": "po-r js-statistics-info di-ib"})

# ------------------------------------------------------------------------------
# Extract the anime's score.
# If no score is found, returns "Unknown".
# ------------------------------------------------------------------------------
def get_score(stats):
    score = stats.find("span", {"itemprop": "ratingValue"})
    return score.text.strip() if score else "Unknown"

# ------------------------------------------------------------------------------
# Extract the genres for the anime.
# Joins all genre texts with commas.
# ------------------------------------------------------------------------------
def get_gender(soup):
    # Find all spans with itemprop "genre" and join their text.
    genres = [x.text.strip() for x in soup.findAll("span", {"itemprop": "genre"})]
    return ", ".join(genres)

# ------------------------------------------------------------------------------
# Extract the description cell from the summary information.
# ------------------------------------------------------------------------------
def get_description(soup):
    return soup.find("td", {"class": "borderClass", "width": "225"})

# ------------------------------------------------------------------------------
# Get all statistic blocks from the HTML.
# These include information like Watching, Completed, etc.
# ------------------------------------------------------------------------------
def get_all_stats(soup):
    # Find the container by its id, then get all divs with class "spaceit_pad".
    return soup.find("div", {"id": "horiznav_nav"}).parent.findAll("div", {"class": "spaceit_pad"})

# ------------------------------------------------------------------------------
# Main function to extract anime information from the HTML ZIP for a given anime_id.
# ------------------------------------------------------------------------------
def get_info_anime(anime_id):
    # Extract the ZIP contents for the given anime_id.
    data = extract_zip(f"data/html/{anime_id}.zip")

    # The file "stats.html" contains the main information.
    html_content = data["stats.html"].decode()

    # Parse the HTML content with BeautifulSoup.
    soup = BeautifulSoup(html_content, "html.parser")

    # Get the statistics table and description area.
    stats = get_table(soup)
    description = get_description(soup)

    # Initialize a dictionary for anime info, defaulting all keys to "Unknown".
    anime_info = {key: "Unknown" for key in KEYS}

    # Populate basic information.
    anime_info["MAL_ID"] = anime_id
    anime_info["Name"] = get_name(soup)
    anime_info["Score"] = get_score(stats)
    anime_info["Genders"] = get_gender(description)

    # ------------------------------------------------------------------------------
    # Process each detail in the description section.
    # ------------------------------------------------------------------------------
    for d in description.findAll("span", {"class": "dark_text"}):
        # Split the parent text by ':' to separate the category and its value.
        information = [x.strip() for x in d.parent.text.split(":")]
        # Category is the first element, value is the rest joined back.
        category, value = information[0], ":".join(information[1:])
        # Remove any tab characters.
        value = value.replace("\t", "")

        # Skip certain categories that are not useful.
        if category in ["Broadcast", "Synonyms", "Genres", "Score", "Status"]:
            continue

        # For Ranked, take only the first line.
        if category in ["Ranked"]:
            value = value.split("\n")[0]
        # For list-type categories, rejoin after stripping.
        if category in ["Producers", "Licensors", "Studios"]:
            value = ", ".join([x.strip() for x in value.split(",")])
        # Remove unwanted characters from numeric categories.
        if category in ["Ranked", "Popularity"]:
            value = value.replace("#", "")
        if category in ["Members", "Favorites"]:
            value = value.replace(",", "")
        # Append " name" to categories for English and Japanese names.
        if category in ["English", "Japanese"]:
            category += " name"

        # Update our anime_info dictionary.
        anime_info[category] = value

    # ------------------------------------------------------------------------------
    # Process additional statistics (e.g., Watching, Completed, On-Hold, Dropped, Plan to Watch)
    # ------------------------------------------------------------------------------
    # Assume the first 5 statistic blocks contain these details.
    for d in get_all_stats(soup)[:5]:
        # Split the text by ':' to separate the category and value.
        parts = [x.strip() for x in d.text.split(":")]
        if len(parts) < 2:
            continue
        category, value = parts[0], parts[1]
        # Remove commas from numeric values.
        value = value.replace(",", "")
        anime_info[category] = value

    # ------------------------------------------------------------------------------
    # Process votes per score (e.g., Score-10, Score-9, etc.)
    # ------------------------------------------------------------------------------
    for d in get_all_stats(soup)[6:]:
        # Find the corresponding score label.
        score_label = d.parent.parent.find("td", {"class": "score-label"}).text.strip()
        # Split the text by "%" and take the part after, then strip the extra text.
        value = [x.strip() for x in d.text.split("%")][1].strip("(votes)")
        label = f"Score-{score_label}"
        anime_info[label] = value.strip()

    # ------------------------------------------------------------------------------
    # Clean up values: Replace placeholders or non-informative values with "Unknown".
    # ------------------------------------------------------------------------------
    for key, value in anime_info.items():
        if str(value) in ["?", "None found, add some", "None", "N/A", "Not available"]:
            anime_info[key] = "Unknown"

    return anime_info